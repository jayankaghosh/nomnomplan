
directive @resolver(class: String!) on FIELD_DEFINITION

schema {
  query: Query
  mutation: Mutation
}

type Query {
  """Get a paginated list of ingredients"""
  getIngredients(
    input: PaginatedListInput!
  ): IngredientList
  @resolver(class: "JayankaGhosh\\NomNomPlan\\Graphql\\Resolver\\GetIngredients")

  """Get a paginated list of recipes"""
  getRecipes(
    input: PaginatedListInput!
  ): RecipeList
  @resolver(class: "JayankaGhosh\\NomNomPlan\\Graphql\\Resolver\\GetRecipes")

  """Get a paginated list of recipes"""
  isAdminPasswordTokenValid(
    token: String!
  ): GenericResponse
  @resolver(class: "JayankaGhosh\\NomNomPlan\\Graphql\\Resolver\\IsAdminPasswordTokenValid")

}

type Mutation {
  """Set the admin password with the help of a token"""
  adminUserSetPassword(
    token: String!
    password: String!
  ): GenericResponse
  @resolver(class: "JayankaGhosh\\NomNomPlan\\Graphql\\Resolver\\AdminUserSetPassword")

  generateAdminToken(
    username: String!
    password: String!
  ): Token
  @resolver(class: "JayankaGhosh\\NomNomPlan\\Graphql\\Resolver\\GenerateAdminToken")
}

type Token {
  token: String!
}

type GenericResponse {
  status: Boolean!
  message: String!
}

input PaginatedListInput {
  filterGroups: [FilterGroupInput]
  pageSize: Int!
  currentPage: Int!
  sort: [SortInput]
}

input SortInput {
  field: String!
  direction: SortDirection!
}

enum SortDirection {
  ASC
  DESC
}

input FilterGroupInput {
  filters: [FilterInput]
  type: FilterGroupType
}

input FilterInput {
  field: String!
  condition: FilterCondition
  value: String
}

enum FilterCondition {
  """Equal"""
  EQ
  """Less than"""
  LT
  LTEQ
  GT
  GTEQ
  IN
  LIKE
}

enum FilterGroupType {
  OR
  AND
}

interface PaginatedListItem {
  id: Int!
  created_at: String!
  updated_at: String!
}

interface PaginatedList {
  pageSize: Int!
  currentPage: Int!
  totalPages: Int!
  items: [PaginatedListItem]!
}

type IngredientList implements PaginatedList {
  pageSize: Int!
  currentPage: Int!
  totalPages: Int!
  items: [Ingredient]!
}

type Ingredient implements PaginatedListItem {
  id: Int!
  name: String
  is_veg: String
  qty_unit: String
  created_at: String!
  updated_at: String!
}

type RecipeList implements PaginatedList {
  pageSize: Int!
  currentPage: Int!
  totalPages: Int!
  items: [Recipe]!
}

type Recipe implements PaginatedListItem {
  id: Int!
  name: String
  ingredients: [RecipeIngredient]
  created_at: String!
  updated_at: String!
}

type RecipeIngredient implements PaginatedListItem {
  id: Int!
  name: String
  is_veg: String
  qty_unit: String
  qty: Float
  created_at: String!
  updated_at: String!
}